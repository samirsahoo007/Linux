Use curl command with --insecure option to skip certificate check and avoid "CApath" error
$ curl https://www.cyberciti.biz/files/sticker/sticker_book.pdf -o /tmp/sticker.pdf
curl: (77) error setting certificate verify locations:
  CAfile: $HOME/.certs/apple_cacerts.pem
  CApath: none
  
SOLUTION:
$curl --insecure https://www.cyberciti.biz/files/sticker/sticker_book.pdf -o /tmp/sticker.pdf

Run bash script straight from github without downloading it
$ curl --insecure -Ls https://github.com/krypted/resetsoftwareupdate/raw/master/resetsoftwareupdate.sh | bash
$ curl http://foo.com/script.sh | bash -s arg1 arg2


$ screen -S <SCREEN_NAME>			# Start a session
Ctrl+A Ctrl+D					# Detach from session
$ screen -ls					# list sessions
$ screen -x <SCREEN_NAME>			# Reattach a session

$ screen -ls
# How to delete a detached session which you want to use no more
e.g.
There is a screen on:
23536.pts-0.wdzee       (10/04/2012 08:40:45 AM)        (Detached)
1 Socket in /var/run/screen/S-root.
Kill screen session:

$ screen -S 23536 -X quit

Ctrl-A and x					# Locks a screen. You can set a key. Later unlock it using your linux password

# How to list the classes/contents in a jar file
jar -tf myjar.jar

# For instance if you have a class named mypkg.HelloWorld in a jar myjar.jar then run it like
javap -classpath myjar.jar mypkg.HelloWorld


# Extract the class from jar file and then run
unzip my.jar 
find -name '*.class' | xargs javap -p > myjar.txt

The myjar.txt file will have all members inside the classes inside jar. You can search it for a method right after.


# Find (and kill) process locking port 3000 on Mac
sudo lsof -i:3000 
kill -9 <PID>

# Getting Help is Important! How to quickly look things up???
Let's say I need to find and replace some text in a file. I know I can do this with the sed command, but have forgotten the syntax.
All I need to do is run tldr sed (We have man but it has a lot of information. You can have 'man sed' for getting into depth)
e.g.
$ tldr sed
$ tldr docker
If tldr is not present install it with 'brew install tldr' (in macOS)

# How to make your system passwordless
$ ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa 
$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys 
$ chmod 0600 ~/.ssh/authorized_keys

# How to enable password again
$ vim ~/.ssh/authorized_keys
and then remove the entry

# How to fix the following error
$ ssh localhost
connect to host localhost port 22: Connection refused

And:
Remove SSH with the following command:
    $ sudo apt-get remove openssh-client openssh-server
    
Install SSH again with:
    $ sudo apt-get install openssh-client openssh-server



# string equality comparison (and make sure to add spaces between the symbols)
if [[ "$s1" == "$s2" ]]
then
    ...
    ...
fi

# string does NOT equal comparison
if [[ "$s1" != "$s2" ]]

# For the a contains b, use:
if [[ $s1 == *"$s2"* ]]

# Directory exists
if [ ! -d "$DOWNLOAD_DIR" ]

# Integer equal comparison
if [ $marks -ge 80 ]		# Similarly -eq, -le



# Functions in bash
#!/bin/bash
# Setting a return status for a function
print_something () {
    echo Hello $1
    return 5
}
print_something Mars
print_something Jupiter
echo The previous function has a return value of $?



# Set the python script output to bash environment
export OUTPUT=$(python3 my_script_outpu.py)
echo $OUTPUT
export TOKEN=$(echo $OUTPUT | cut -d " " -f 3)
echo $TOKEN

Find newly added files to git repo:
for f in $(find ./ -type f); do git log --format=%aD $f | tail -1;echo $f; done

curl https://xyyyz.com/		# Perform an HTTP GET request
curl -i https://xyyyz.com/	# By default the response headers are hidden in the output of curl. To show them, use the i option:
curl -I https://xyyyz.com/	# Using the I option, you can get only the headers, and not the response body:

The X option lets you change the HTTP method used. By default, GET is used, and it’s the same as writing
curl -X GET https://xyyyz.com/

You can perform a POST request passing data URL encoded:
curl -d "option=value&something=anothervalue" -X POST https://xyyyz.com/	# In this case, the application/x-www-form-urlencoded Content-Type is sent.

Perform an HTTP POST request sending JSON
In this case you need to explicitly set the Content-Type header, by using the H option:

curl -d '{"option": "value", "something": "anothervalue"}' -H "Content-Type: application/json" -X POST https://xyyyz.com/

curl -d "@my-file.json" -X POST https://xyyyz.com/	# You can also send a JSON file from your disk:

Perform an HTTP PUT request. The concept is the same as for POST requests, just change the HTTP method using -X PUT

Follow a redirect
A redirect response like 301, which specifies the Location response header, can be automatically followed by specifying the L option:
curl http://xyyyz.com/ will not follow automatically to the HTTPS version which I set up to redirect to, but this will:

curl -L http://xyyyz.com/

curl -o file.html https://xyyyz.com/	# Store the response to a file
curl -O https://xyyyz.com/index.html	# You can also just save a file by its name on the server, using the O option:


curl -u user:pass https://xyyyz.com/	# Using HTTP authentication
curl --user-agent "my-user-agent" https://xyyyz.com	# Inspecting all the details of the request and the response

Use the --verbose option to make curl output all the details of the request, and the response:

curl --verbose -I https://xyyyz.com/
*   Trying 178.128.202.129...
* TCP_NODELAY set
* Connected to xyyyz.com (178.128.202.129) port 443 (#0)
* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
* Server certificate: xyyyz.com
* Server certificate: Let's Encrypt Authority X3
* Server certificate: DST Root CA X3
> HEAD / HTTP/1.1
> Host: xyyyz.com
> User-Agent: curl/7.54.0
> Accept: */*
>
< HTTP/1.1 200 OK
HTTP/1.1 200 OK
< Cache-Control: public, max-age=0, must-revalidate
Cache-Control: public, max-age=0, must-revalidate
< Content-Type: text/html; charset=UTF-8
Content-Type: text/html; charset=UTF-8
< Date: Mon, 30 Jul 2018 08:08:41 GMT
Date: Mon, 30 Jul 2018 08:08:41 GMT
...

Copying any browser network request to a curl command
When inspecting any network request using the Chrome Developer Tools, you have the option to copy that request to a curl request:
On your browser got to Network->Copy->Copy as cURL

curl 'https://github.com/curl/curl' -H 'Connection: keep-alive' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache' -H 'Upgrade-Insecure-Requests: 1' -H 'DNT: 1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' -H 'Referer: https://www.google.it/' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: en-US,en;q=0.9,it;q=0.8' -H 'Cookie: _octo=GH1.1.933116459.1507545550; _ga=GA1.2.643383860.1507545550; tz=Europe%2FRome; user_session=XXXXX; __Host-user_session_same_site=YYYYYY; dotcom_user=xyyyz; logged_in=yes; has_recent_activity=1; _gh_sess=ZZZZZZ' --compressed

* Customize/Change Bash Prompt In Linux
** To get a tty like MyTestPrompt> add the following line to ~/.bash_profile or ~/.bashrc
PS1="MyTestPrompt> "

** Run the source command like below
source ~/.bashrc

Another example:
e.g. export PS1="\u\H $”
---------------------------------------------------------------------------------
To create 1MB file (1024kb), enter:
$ dd if=/dev/zero of=test.img bs=1024 count=0 seek=1024

You will get an empty files (also known as "sparse file") of arbitrary size using above syntax. To create 10MB file , enter:
$ dd if=/dev/zero of=test.img bs=1024 count=0 seek=$[1024*10]

To create 100MB file , enter:
$ dd if=/dev/zero of=test.img bs=1024 count=0 seek=$[1024*100]
$ ls -lh test.img

To create 1GB, file:
$ dd if=/dev/zero of=1g.img bs=1 count=0 seek=1G

How to delete everything except a particular file(say stock.py)
	find ./ ! -name  stock.py | xargs rm -rf

Delete trailing whitespace from all files in current directory tree
	find . -type f -print0 | xargs -0 sed -i '' -E "s/[[:space:]]*$//"

Replacing or substituting string : $sed 's/unix/linux/' geekfile.txt
  
Replacing all the occurrence of the pattern in a line : $sed 's/unix/linux/g' geekfile.txt

Delete Lines:   $ sed '2d' myfile

What about deleting a range of lines?: $ sed '2,3d' myfile
$ sed '3,$d' myfile                     delete to the end. Here we delete from the third line to the end of the file.

Print lines between PAT1 and PAT2 - include PAT1 and PAT2: sed -n '/PAT1/,/PAT2/p' FILE


sed -n 'Np' FILE.txt
Example:
To print 1st line,   $ sed -n '1p' sedtest.txt

This is line #1While, to print last line, $ sed -n '$p' sedtest.txt

To print 3rd line to 8th line.

$ sed -n '3,8p' sedtest.txt
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8

Similarly, in order to print lines starting from 5th up to last line, you would run-

$ sed -n '5,$p' sedtest.txt
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

history -d <line number>	# delete a particular command from history
history -c			# Clears the entire history
# Or just remove the selected lines from .bash_history

How to delete first line and print rest?
docker container ps | awk '{print $1}' | sed 1d			# Use sed to delete first line

How to convert a docx file to md file?
$ pandoc -f docx -t markdown README.docx -o README.md

How to kill all running celery processes found?
kill $(ps aux | grep -v 'grep -i celery' | grep -i celery | awk '{print $2}')

zip -r filename.zip filesdir

Putty session locked up from CTRL+S? How to unlock Putty session?
If you are using putty terminal, putty session locks up and becomes unresponsive after you pressed “CTRL + S”
To restore current putty session, press “CTRL + Q”

CTSL+S => XOFF
CTRL+Q => XON

ss - Another utility to investigate sockets
ss is used to dump socket statistics. It allows showing information similar to netstat.  It can display more TCP and state information than other tools.
sudo (sometimes considered as short for Super-user do)

Oracle specific commands:
To connect Oracle DB in linux:
sqlplus username/password@hostname:portnumber/Servicename
sqlplus user0001/password0001@hostname01.us.companyDomain:20001/DBName

e.g. in our E2 source:
      'ENGINE': 'django.db.backends.oracle',
      'NAME': 'DBName',
      'USER': 'user0001',
      'PASSWORD': 'password0001',
      'HOST': 'hostname01.us.companyDomain',
      'PORT': '20001'

Queries:
select table_name from all_tables
SELECT view_name FROM all_views
select table_name, owner, tablespace_name from all_tables
select * from all_tables
SELECT table_name FROM user_tables

Try the below data dictionary views.
tabs
dba_tables
all_tables
user_tables
Select * from dba_tables; -- need to have select catalog role
Select * from user_tables;-- to see tables of your schema
Select * from all_tables; -- tables inside your schma and tables of orher schema which you possess select grants on

ldd - print shared library dependencies


UDP: 
Anything where you don't care too much if you get all data always
UDP is a connectionless protocol - it simply has a destination and nodes simply pass it along if it comes as best as they can. So packets arriving out of order, along various routes etc are common. So Instant messengers and similar software developers think UDP an ideal solution.
In real life if you want to throw data in the net, without worrying about time taken to reach, order of reaching use UDP.
Tunneling/VPN (lost packets are ok - the tunneled protocol takes care of it)
Streaming media applications such as movies (lost frames are ok)
Online multiplayer games or Games that don't care if you get every update
Local broadcast mechanisms (same application running on different machines "discovering" each other)
Domain Name System (DNS)
Voice over IP (VoIP)
Trivial File Transfer Protocol (TFTP)
TCP + UDP = SMTP (example: mobile, telephone)

* **Reason: ***suppose if some packet (frame/sequence) is missing we can understand the content. Because video is collection of frames. For 1 second video there should be 25 frames (image).Even though we can understand some frames are missing due to our imagination skills. That’s why UDP is used for video streaming.

TCP: 
Almost anything where you have to get all transmitted data
TCP is a connection oriented protocol, it establishes a path, or a virtual connection all the way through switches routers proxies etc. and then starts any communication. Various mechanisms like routing djikstras shortest path algorithm exist to establish the virtual end to end connection. So it finds itself used while browsing HTML and other pages, making payments and web applications in general.
If you want a solid path before you start throwing packets, and want same order and latency for your data packets use TCP - I will use UDP for Torrents and TCP for PayPal!
www or World Wide Web(HTTP)
SSH, FTP, telnet
Email(SMTP, sending mail / IMAP/POP, receiving mail)

UDP is mailing a letter at the post office.
TCP is mailing a letter with a return receipt at the post office, except that the post master will organize the letters in-order-of mailing and only deliver them in-order.

The classic standpoint is to consider TCP as safe and UDP as unreliable.
But when TCP-IP protocols are used in safety critical applications, TCP is not recommended because it can stop on error for multiple reasons. Whereas UDP lets the application software deal with errors, retransmission timers, etc.

Moreover, TCP has more processing overhead than UDP.
Currently, UDP is used in aircraft controls and flight instruments, in the ARINC 664 standard also named AFDX (Avionics Full-Duplex Switched Ethernet). In ARINC 664, TCP is optional but UDP is used with the RTOS (real time operating systems) designed for the ARINC 653 standard (high reliability control software in civil aircrafts).

TCP
I will not send data anymore until i get an acknowledgment.
this process is slow
It is used for security purpose

UDP
Here i have no headache with acknowledgment.
this process is faster but here data can be lost .
example : video streaming , online games etc

Understanding Active Directory services(LDAP):
·	CN = Common Name
·	OU = Organizational Unit
·	DC = Domain Component
These are all parts of the X.500 Directory Specification, which defines nodes in a LDAP directory.
You can also read up on LDAP data Interchange Format (LDIF), which is an alternate format.
You read it from right to left, the right-most component is the root of the tree, and the left most component is the node (or leaf) you want to reach.
Each = pair is a search criteria. 
With your example query
("CN=Dev-India,OU=Distribution Groups,DC=gp,DC=gl,DC=google,DC=com");
In effect the query is:
From the com Domain Component, find the google Domain Component, and then inside it the gl Domain Component and then inside it the gp Domain Component.
In the gp Domain Component, find the Organizational Unit called Distribution Groups and then find the the object that has a common name of Dev-India.
It is a DN (Distinguished Name) (a series of comma-separated key/value pairs used to identify entries uniquely in the directory hierarchy). The DN is actually the entry's fully qualified name.
Here you can see an example where I added some more possible entries.
The actual path is represented using green.
 
The following paths represent DNs (and their value depends on what you want to get after the query is run):
·	"DC=gp,DC=gl,DC=google,DC=com"
·	"OU=Distribution Groups,DC=gp,DC=gl,DC=google,DC=com"
·	"OU=People,DC=gp,DC=gl,DC=google,DC=com"
·	"OU=Groups,DC=gp,DC=gl,DC=google,DC=com"
·	"CN=QA-USA,OU=Distribution Groups,DC=gp,DC=gl,DC=google,DC=com"
·	"CN=Dev-India,OU=Distribution Groups,DC=gp,DC=gl,DC=google,DC=com"
"CN=Ted Owen,OU=People,DC=gp,DC=gl,DC=google,DC=com"
LDAP Namespace Structure 
A directory service has two major features. First, it distributes its information base among many different servers. Second, users can access directory information by querying any of those servers. Making this work requires defining a namespace in which each object's location can be quickly determined. 
Common Names
As we saw in the last section, information in an LDAP database comes in the form of objects. Objects have attributes that describe them. For example, the User object for Tom Jones would have attributes such as Tom's logon name, his password, his phone number, his email address, his department, and so forth. 
When an LDAP client needs to locate information about an object, it submits a query that contains the object's distinguished name (DN) and the attributes the client wants to see. A search for information about Tom Jones could be phrased in a couple of ways: 
·	You could search for attributes in Tom's User object. “Give me the Department attribute for cn=Tom Jones,cn=Users,dc=Company,dc=com.” 
Distinguished Names
A name that includes an object's entire path to the root of the LDAP namespace is called its distinguished name, or DN. An example DN for a user named CSantana whose object is stored in the cn=Users container in a domain named Company.com would be cn=CSantana,cn=Users,dc=Company,dc=com. 
Relative Distinguished Names
An object name without a path, or a partial path, is called a relative distinguished name, or RDN. The common name cn=CSantana is an example of an RDN. So is cn=CSantana,cn=Users. The RDN serves the same purpose as a path fragment in a filename. It is a convenient navigational shortcut. 
Two objects can have the same RDN, but LDAP has a rule that no two objects can have the same DN. This makes sense if you think of the object-oriented nature of the database. Two objects with the same DN would try to occupy the same row in the database table. C'est impossible, as we say in southern New Mexico. 
Case Sensitivity of LDAP Names 
Distinguished names in Active Directory are not case sensitive. In most instances, the case you specify when you enter a value is retained in the object's attribute. This is similar to the way Windows treats filenames. Feel free to mix cases based on your corporate standards or personal aesthetic. 
Typeless Names and Delimiters
If you write scripts and you need to allow for periods in object names, precede the period with a backslash. This tells the parser that the period is a special character, not a delimiter. For example, if your user names look like tom.collins, a typeless name in a script would look like this: tom\.collins.Users.Company.com. The same is true for user names that have embedded commas and periods, such as Winston H. Borntothepurple, Jr. An ADSI query for this name would look like this: winston h\. borntothepurple\, jr\. 
Naming Contexts
As the number of objects in a DIT grows, the database may get too large to store efficiently on one DSA. Also, an organization might want to use bandwidth more effectively by using a DSA in New York to store information about users in North America and another DSA in Amsterdam to store information about users in Europe. 
Naming Contexts and Partitions
X.501, “Information Technology—Open Systems Interconnection—The Directory: Models,” defines the term naming context as, “A subtree of entries held in a single master DSA.” It goes on to describe the process of dividing a tree into multiple naming contexts as partitioning.
Novell chose to adopt the term partition to define separate pieces of the directory database. In their seminal book, Understanding and Deploying LDAP Directory Services, Tim Howe, Mark Smith, and Gordon Good use the term partition in favor of naming context, although they describe both as meaning the same thing. Microsoft uses the two terms interchangeably. 
The tools that come with the Windows Server 2003 CD and in the Resource Kit favor the term naming context. That is the term I use throughout this book. 
Here is where the distributed nature of an LDAP database comes into play. The Directory Information Base can be separated into parts called naming contexts, or NCs. In Active Directory, each domain represents a separate naming context. Domain controllers in the same domain each have a read/write replica of that Domain naming context. Configuration and Schema objects are stored in their own naming contexts, as are DNS Record objects when using Active Directory Integrated DNS zones. 
When a client submits a query for information about a particular object, the system must determine which DSA hosts the naming context that contains that particular object. It does this using the object's distinguished name and knowledge about the directory topology. 
If a DSA cannot respond to a query using information in the naming contexts it hosts, it sends the client a referral to a DSA hosting the next higher or lower naming context in the tree (depending on the distinguished name of the object in the search). The client then submits the request to a DSA hosting the naming context in the referral. This DSA either responds with the information being requested or a referral to another DSA. This is called walking the tree.
DSAs that host copies of the same naming context must replicate changes to each other. It's important to keep this in mind as you work with Active Directory servers. If you have separate domains, then clients in one domain must walk the tree to get access to Active Directory objects in another domain. If the domain controllers for the domains are in different locations in the WAN, this can slow performance. Many of the architectural decisions you'll make as you design your system focus on the location, accessibility, and reliability of naming contexts. 
LDAP Searches 
From a client's perspective, LDAP operates like a well-run department store. In a department store, you can sidle up to the fragrance counter and ask, “How much is the Chanel No. 5?” and be sure of getting an immediate reply, especially if you already have your credit card in hand. The same is true of LDAP. When a search request is submitted to a DSA that hosts a copy of the naming context containing the objects involved in the search, the DSA can answer the request immediately. 
But in a department store, what if you ask the fragrance associate, “Where can I find a size 16 chambray shirt that looks like a Tommy Hilfiger design but doesn't cost so darn much?” The associate probably doesn't know, but gives you directions to the Menswear department. You make your way there and ask your question to an associate standing near the slacks. The associate may not know the answer, but gives you directions to the Bargain Menswear department in the basement behind last year's Christmas decorations. You proceed to that area and ask an associate your question again. This time you're either handed a shirt or given an excuse why one isn't available. 
LDAP uses a similar system of referrals to point clients at the DSA that hosts the naming context containing the requested information. These referrals virtually guarantee the success of any lookup so long as the object exists inside the scope of the information base. 
The key point to remember is that LDAP referrals put the burden of searching on the clients. This contrasts to X.500, where all the messy search work is handed over to the DSAs. LDAP is Wal-Mart to the Nordstroms of X.500. 
RootDSE
When LDAP clients need information from a DSA, they must first bind to the directory service. This authenticates the client and establishes a session for the connection. The client then submits queries for objects and attributes within the directory. This means the client needs to know the security requirements of the DSA along with the structure of the directory service it hosts. 
DSAs “advertise” this information by constructing a special object called RootDSE. The RootDSE object acts like a signpost at a rural intersection. It points the way to various important features in the directory service and gives useful information about the service. LDAP clients use this information to select an authentication mechanism and configure their searches. 
Each DSA constructs its own copy of RootDSE. The information is not replicated between DSAs. RootDSE is like the eye above the pyramid on the back of a dollar bill. It sits apart from the structure but knows all about it. You'll be seeing more about RootDSE later in this book in topics that cover scripting. Querying RootDSE for information about Active Directory rather than hard-coding that information into your scripts is a convenient way to make your scripts portable. 
LDAP Namespace Structure Summary 
Here are the highlights of what you need to remember about the LDAP namespace structure to help you design and administer Active Directory: 
·	An object's full path in the LDAP namespace is called its distinguished name. All DNs must be unique. 
·	The Directory Information Tree, or DIT, is a distributed LDAP database that can be hosted by more than one server. 
·	The DIT is divided into separate units called naming contexts. A domain controller can host more than one naming context.
·	Active Directory uses separate naming contexts to store information about domains in the same DIT.
·	When LDAP clients search for an object, LDAP servers refer the clients to servers that host the naming context containing that object. They do this using shared knowledge about the system topology. 
·	Each DSA creates a RootDSE object that describes the content, controls, and security requirements of the directory service. Clients use this information to select an authentication method and to help formulate their search requests. 
Ref: http://www.zytrax.com/books/ldap/apd/ for indexes

Setup ldap server and client (Ref http://www.learnitguide.net/2016/01/configure-openldap-server-on-rhel7.html )
OpenLDAP Server Configuration on RHEL6
LDAP, or Lightweight Directory Access Protocol, is a protocol for managing related information from a centralized location through the use of a file and directory hierarchy. It functions in a similar way to a relational database in certain ways, and can be used to organize and store any kind of information. LDAP is commonly used for centralized authentication.

Our Lab Setup
 
Description	Server Information	Client Information	   
Operating System	RHEL6 - 64 Bit	RHEL6 - 64 Bit	   
Host Name	host0001.hk.companyDomain	host0002.hk.companyDomain	   
IP Address	abc.de.fgh.jkl	mno.pq.rst.uv	 

Prerequisites:
1. Make sure both server host0001.hk.companyDomain (abc.de.fgh.jkl) and client host0002.hk.companyDomain (mno.pq.rst.uv) are accessible.
2. Make an entry of each host in /etc/hosts for name resolution or configure it in DNS to resolve the IP, if you use server name instead of IP address. Read also How to Configure DNS Server on RHEL7 But we use IP Address for reference.
Server end configuration
Login into the server host0001.hk.companyDomain (abc.de.fgh.jkl) and do the following steps to configure OpenLDAP Server.

1. Install the required LDAP Packages "Openldap"
Install the appropriate LDAP packages "openldap" and "migrationtools" using yum to avoid dependencies issue. if yum is not configured, please refer the link Yum Configuration on Linux
[root@host0001 ~]# yum -y install openldap* migrationtools
2. Create a LDAP root passwd for administration purpose.
[root@host0001 ~]# slappasswd
New password:
Re-enter new password:
{SSHA}dsfkdsfjdsflkdsfkdsfdskfkdfd
Copy the encrypted the passwd from the above output "{SSHA}ffkdsfdsfdfkdsfldsfkdfdkfdsf". Replace with your password and keep it aside.
3. Edit the OpenLDAP Server Configuration
OpenLDAP server Configuration files are located in /etc/openldap/slapd.d/.
Go to cn=config directory under /etc/openldap/slapd.d/ and edit the "olcDatabase={2}hdb.ldif" for changing the configuration.
[root@host0001 ~]# cd /etc/openldap/slapd.d/cn=config
[root@host0001 cn=config]# vi olcDatabase={2}hdb.ldif
Change the variables of "olcSuffix" and "olcRootDN" according to your domain as below.
olcSuffix: dc=hk,dc=companyDomain
olcRootDN: cn=Manager,dc=hk,dc=companyDomain
Add the below three lines additionally in the same configuration file.
olcRootPW: {SSHA}bHSiwuPJEypHS6zHSE2Uy7M69sQjmkPL
olcTLSCertificateFile: /etc/pki/tls/certs/ host0001.pem
olcTLSCertificateKeyFile: /etc/pki/tls/certs/ host0001.pem
Replace the "olcRootPW" value with your copied passwd. Now Save and exit the configuration file.

The suffix line names the domain for which the LDAP server provides information and should be changed to your domain name. The rootdn entry is the Distinguished Name
